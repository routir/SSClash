#!/bin/sh

CONFIG_FILE="/opt/clash/config.yaml"
EXCLUDED_INTERFACES_FILE="/opt/clash/excluded_interfaces"

readonly RESERVED_NETWORKS="0.0.0.0/8 10.0.0.0/8 100.64.0.0/10 127.0.0.0/8 169.254.0.0/16 172.16.0.0/12 192.0.2.0/24 192.88.99.0/24 192.168.0.0/16 198.18.0.0/15 198.51.100.0/24 203.0.113.0/24 224.0.0.0/4 240.0.0.0/4 255.255.255.255/32"

# Function to log messages
msg() {
    logger -p daemon.info -st "clash-rules[$$]" "$*"
}

# Function to check if a string is a valid IP address
is_valid_ip() {
    local ip="$1"
    # Check if it's a valid IPv4 address
    echo "$ip" | grep -qE '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
}

# Function to resolve domain name to IP addresses
resolve_domain() {
    local domain="$1"
    local resolved_ips=""

    # Use nslookup to resolve the domain
    if command -v nslookup >/dev/null 2>&1; then
        resolved_ips=$(nslookup "$domain" 2>/dev/null | awk '/^Address: / { print $2 }' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$')
    fi

    # If nslookup failed or not available, try using getent
    if [ -z "$resolved_ips" ] && command -v getent >/dev/null 2>&1; then
        resolved_ips=$(getent hosts "$domain" 2>/dev/null | awk '{print $1}' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$')
    fi

    # If getent failed or not available, try using wget
    if [ -z "$resolved_ips" ] && command -v wget >/dev/null 2>&1; then
        resolved_ips=$(wget -T 5 -t 1 --spider "$domain" 2>&1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
    fi

    # If all failed, try using ping (fallback)
    if [ -z "$resolved_ips" ] && command -v ping >/dev/null 2>&1; then
        resolved_ips=$(ping -c 1 -W 2 "$domain" 2>/dev/null | head -1 | grep -oE '\([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\)' | tr -d '()')
    fi

    # Ensure each IP is on a separate line and remove duplicates
    if [ -n "$resolved_ips" ]; then
        echo "$resolved_ips" | tr ' ' '\n' | grep -v '^$' | sort -u
    fi
}

# Extract server IPs from config.yaml
extract_server_ips() {
    if [ ! -f "$CONFIG_FILE" ]; then
        msg "ERROR: Config file not found: $CONFIG_FILE"
        return 1
    fi

    local all_ips=""

    # Extract servers using awk
    local servers=$(awk '
    /^proxies:/ { in_proxies = 1; next }
    /^[a-zA-Z]/ && !/^  / { in_proxies = 0 }
    in_proxies && /server:/ {
        gsub(/^[[:space:]]*server:[[:space:]]*/, "")
        gsub(/[[:space:]]*$/, "")
        sub(/#.*/, "")
        print $0
    }
    ' "$CONFIG_FILE")

    # Process each server entry
    if [ -n "$servers" ]; then
        echo "$servers" | while IFS= read -r server; do
            [ -z "$server" ] && continue

            if is_valid_ip "$server"; then
                # It's already an IP address
                echo "$server"
            else
                # It's a domain name, resolve it
                resolved_ips=$(resolve_domain "$server")
                if [ -n "$resolved_ips" ]; then
                    echo "$resolved_ips"
                else
                    msg "WARNING: Could not resolve domain: $server"
                fi
            fi
        done
    fi
}

# Function to get WAN interface through which default route passes
get_wan_interface() {
    # Get the interface through which default route passes
    ip route show default 2>/dev/null | awk '/default via/ {print $5}' | head -1
}

# Function to ensure WAN interface is saved in excluded_interfaces file
ensure_wan_excluded() {
    local wan_interface
    wan_interface=$(get_wan_interface)

    [ -z "$wan_interface" ] && return

    # Create file if it doesn't exist
    touch "$EXCLUDED_INTERFACES_FILE" 2>/dev/null

    # Already exists?
    if grep -q "^${wan_interface}$" "$EXCLUDED_INTERFACES_FILE" 2>/dev/null; then
        return
    fi

    # Add and log
    echo "$wan_interface" >> "$EXCLUDED_INTERFACES_FILE"
    msg "Adding WAN interface '$wan_interface' to excluded interfaces file"
}

# Function to load excluded interfaces from config file
load_excluded_interfaces() {
    if [ -f "$EXCLUDED_INTERFACES_FILE" ]; then
        cat "$EXCLUDED_INTERFACES_FILE" | grep -v '^$' | sort -u
    fi
}

# Function to get all interfaces to exclude (WAN + user-selected)
get_excluded_interfaces() {
    local wan_interface excluded_interfaces user_only all_excluded=""

    # Get WAN interface
    wan_interface=$(get_wan_interface)
    if [ -n "$wan_interface" ]; then
        all_excluded="$wan_interface"
        msg "Auto-detected WAN interface: $wan_interface"
    fi

    # Get user-selected excluded interfaces
    excluded_interfaces=$(load_excluded_interfaces)

    # Remove WAN from user output
    if [ -n "$wan_interface" ] && [ -n "$excluded_interfaces" ]; then
        user_only=$(echo "$excluded_interfaces" | grep -v "^${wan_interface}$")
    else
        user_only="$excluded_interfaces"
    fi

    if [ -n "$user_only" ]; then
        if [ -n "$all_excluded" ]; then
            all_excluded="$all_excluded
$user_only"
        else
            all_excluded="$user_only"
        fi
        msg "User-selected excluded interfaces: $(echo "$user_only" | tr '\n' ' ')"
    fi

    # Remove duplicates and return
    if [ -n "$all_excluded" ]; then
        echo "$all_excluded" | sort -u
    fi
}

# For nftables - apply rules for excluded interfaces to prevent routing loops
apply_nft_excluded_interface_rules() {
    local excluded_interfaces
    excluded_interfaces=$(get_excluded_interfaces)

    if [ -n "$excluded_interfaces" ]; then
        msg "Excluded interfaces: $(echo "$excluded_interfaces" | tr '\n' ' ')"
        echo "$excluded_interfaces" | while IFS= read -r iface; do
            [ -n "$iface" ] && nft add rule ip clash prerouting iifname "$iface" return
        done
    else
        msg "No excluded interfaces found"
    fi
}

# For iptables - apply rules for excluded interfaces to prevent routing loops
apply_iptables_excluded_interface_rules() {
    local excluded_interfaces
    excluded_interfaces=$(get_excluded_interfaces)

    if [ -n "$excluded_interfaces" ]; then
        msg "Excluded interfaces: $(echo "$excluded_interfaces" | tr '\n' ' ')"
        echo "$excluded_interfaces" | while IFS= read -r iface; do
            [ -n "$iface" ] && iptables -t mangle -A CLASH -i "$iface" -j RETURN
        done
    else
        msg "No excluded interfaces found"
    fi
}

# For nftables - apply DHCP exclusion rules
apply_nft_dhcp_rules() {
    # Exclude DHCP traffic (ports 67-68)
    nft add rule ip clash prerouting udp sport 67 udp dport 68 return
    nft add rule ip clash prerouting udp sport 68 udp dport 67 return
    nft add rule ip clash output udp sport 67 udp dport 68 return
    nft add rule ip clash output udp sport 68 udp dport 67 return

    msg "DHCP traffic excluded from proxy"
}

# For iptables - apply DHCP exclusion rules
apply_iptables_dhcp_rules() {
    # Exclude DHCP traffic (ports 67-68)
    iptables -t mangle -I CLASH 1 -p udp --sport 67 --dport 68 -j RETURN
    iptables -t mangle -I CLASH 1 -p udp --sport 68 --dport 67 -j RETURN
    iptables -t mangle -I CLASH_LOCAL 1 -p udp --sport 67 --dport 68 -j RETURN
    iptables -t mangle -I CLASH_LOCAL 1 -p udp --sport 68 --dport 67 -j RETURN

    msg "DHCP traffic excluded from proxy"
}

# For nftables - prevent routing loops with marks
apply_nft_loop_prevention() {
    # Exclude packets already marked by Clash
    nft add rule ip clash prerouting meta mark 0x0002 return
    nft add rule ip clash output meta mark 0x0002 return

    # Prevent already marked packets from re-entering
    nft add rule ip clash prerouting meta mark and 0xff00 != 0 return
    nft add rule ip clash output meta mark and 0xff00 != 0 return

    msg "Loop prevention rules applied"
}

# For iptables - prevent routing loops with marks
apply_iptables_loop_prevention() {
    # Exclude packets already marked by Clash
    iptables -t mangle -A CLASH -m mark --mark 0x0002 -j RETURN
    iptables -t mangle -A CLASH_LOCAL -m mark --mark 0x0002 -j RETURN

    # Prevent already marked packets
    iptables -t mangle -A CLASH -m mark --mark 0xff00/0xff00 -j RETURN
    iptables -t mangle -A CLASH_LOCAL -m mark --mark 0xff00/0xff00 -j RETURN

    msg "Loop prevention rules applied"
}

# For nftables - apply rules for reserved networks
apply_nft_reserved_networks() {
    for network in $RESERVED_NETWORKS; do
        nft add rule ip clash prerouting ip daddr "$network" return
        nft add rule ip clash output ip daddr "$network" return
    done

    msg "Reserved networks excluded from proxy"
}

# For iptables - apply rules for reserved networks
apply_iptables_reserved_networks() {
    for network in $RESERVED_NETWORKS; do
        iptables -t mangle -A CLASH -d "$network" -j RETURN
        iptables -t mangle -A CLASH -s "$network" -j RETURN
        iptables -t mangle -A CLASH_LOCAL -d "$network" -j RETURN
        iptables -t mangle -A CLASH_LOCAL -s "$network" -j RETURN
    done

    msg "Reserved networks excluded from proxy (both source and destination)"
}

# For nftables - block QUIC traffic
apply_nft_quic_blocking() {
    # Block QUIC first (for YouTube)
    nft add rule ip clash prerouting udp dport 443 reject

    msg "QUIC traffic blocked"
}

# For iptables - block QUIC traffic
apply_iptables_quic_blocking() {
    # Block QUIC first (for YouTube)
    iptables -t filter -I INPUT -p udp --dport 443 -j REJECT 2>/dev/null
    iptables -t filter -I FORWARD -p udp --dport 443 -j REJECT 2>/dev/null

    msg "QUIC traffic blocked"
}

# For nftables - exclude Clash process and ports
apply_nft_clash_exclusions() {
    # Exclude Clash process itself (by user ID if available)
    nft add rule ip clash output meta skuid 0 return

    # Exclude specific ports used by Clash
    nft add rule ip clash prerouting tcp dport {7890, 7891, 7892, 7893, 7894} return
    nft add rule ip clash prerouting udp dport {7890, 7891, 7892, 7893, 7894} return
    nft add rule ip clash output tcp sport {7890, 7891, 7892, 7893, 7894} return
    nft add rule ip clash output udp sport {7890, 7891, 7892, 7893, 7894} return

    msg "Clash process and ports excluded from proxy"
}

# For iptables - exclude Clash ports
apply_iptables_clash_exclusions() {
    # Exclude specific ports used by Clash
    iptables -t mangle -A CLASH -p tcp --dport 7890:7894 -j RETURN
    iptables -t mangle -A CLASH -p udp --dport 7890:7894 -j RETURN
    iptables -t mangle -A CLASH -p tcp --sport 7890:7894 -j RETURN
    iptables -t mangle -A CLASH -p udp --sport 7890:7894 -j RETURN

    iptables -t mangle -A CLASH_LOCAL -p tcp --dport 7890:7894 -j RETURN
    iptables -t mangle -A CLASH_LOCAL -p udp --dport 7890:7894 -j RETURN
    iptables -t mangle -A CLASH_LOCAL -p tcp --sport 7890:7894 -j RETURN
    iptables -t mangle -A CLASH_LOCAL -p udp --sport 7890:7894 -j RETURN

    msg "Clash ports excluded from proxy"
}

# For nftables - exclude proxy server IPs
apply_nft_server_exclusions() {
    local server_ips="$1"

    if [ -n "$server_ips" ]; then
        echo "$server_ips" | while IFS= read -r ip; do
            [ -n "$ip" ] && {
                nft add rule ip clash prerouting ip saddr "$ip/32" return
                nft add rule ip clash prerouting ip daddr "$ip/32" return
                nft add rule ip clash output ip saddr "$ip/32" return
                nft add rule ip clash output ip daddr "$ip/32" return
            }
        done
        msg "Proxy server IPs excluded from proxy"
    else
        msg "No proxy server IPs to exclude"
    fi
}

# For iptables - exclude proxy server IPs
apply_iptables_server_exclusions() {
    local server_ips="$1"

    if [ -n "$server_ips" ]; then
        echo "$server_ips" | while IFS= read -r ip; do
            [ -n "$ip" ] && {
                iptables -t mangle -A CLASH -d "$ip/32" -j RETURN
                iptables -t mangle -A CLASH -s "$ip/32" -j RETURN
                iptables -t mangle -A CLASH_LOCAL -d "$ip/32" -j RETURN
                iptables -t mangle -A CLASH_LOCAL -s "$ip/32" -j RETURN
            }
        done
        msg "Proxy server IPs excluded from proxy"
    else
        msg "No proxy server IPs to exclude"
    fi
}

# For nftables - apply TPROXY rules
apply_nft_tproxy_rules() {
    # TPROXY rules with mark to prevent loops
    nft add rule ip clash prerouting ip protocol tcp tproxy to 127.0.0.1:7894 meta mark set 0x0001
    nft add rule ip clash prerouting ip protocol udp tproxy to 127.0.0.1:7894 meta mark set 0x0001

    # Mark packets for routing (only unmarked packets)
    nft add rule ip clash output meta mark 0 ip protocol tcp meta mark set 0x0001
    nft add rule ip clash output meta mark 0 ip protocol udp meta mark set 0x0001

    msg "TPROXY rules applied"
}

# For iptables - apply TPROXY rules
apply_iptables_tproxy_rules() {
    # TPROXY rules with mark to prevent loops
    iptables -t mangle -A CLASH -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port 7894 --tproxy-mark 0x0001
    iptables -t mangle -A CLASH -p udp -j TPROXY --on-ip 127.0.0.1 --on-port 7894 --tproxy-mark 0x0001

    # Mark packets for routing (only unmarked packets)
    iptables -t mangle -A CLASH_LOCAL -m mark --mark 0 -p tcp -j MARK --set-mark 0x0001
    iptables -t mangle -A CLASH_LOCAL -m mark --mark 0 -p udp -j MARK --set-mark 0x0001

    msg "TPROXY rules applied"
}

# Apply nftables rules dynamically
apply_nft_rules() {
    local server_ips="$1"

    # Delete existing table
    nft delete table ip clash 2>/dev/null

    # Create table and chains
    nft add table ip clash
    nft add chain ip clash prerouting '{ type filter hook prerouting priority dstnat + 1; policy accept; }'
    nft add chain ip clash output '{ type route hook output priority mangle; policy accept; }'

    # Apply rules in logical order
    apply_nft_dhcp_rules
    apply_nft_excluded_interface_rules
    apply_nft_loop_prevention
    apply_nft_reserved_networks
    apply_nft_quic_blocking
    apply_nft_clash_exclusions
    apply_nft_server_exclusions "$server_ips"
    apply_nft_tproxy_rules

    msg "nftables rules applied successfully"
}

start() {
    msg "Starting Clash rules script"

    # Ensure WAN interface is in excluded list
    ensure_wan_excluded

    local server_ips
    server_ips=$(extract_server_ips)

    if [ $? -eq 0 ] && [ -n "$server_ips" ]; then
        msg "Extracted server IPs: $(echo "$server_ips" | tr '\n' ' ')"
    else
        msg "WARNING: No server IPs extracted from config"
    fi

    if hash nft 2>/dev/null; then
        msg "Using nftables for traffic redirection"
        # Apply nftables rules dynamically
        apply_nft_rules "$server_ips"
        ip route add local default dev lo table 100
        ip rule add fwmark 0x0001 table 100
    elif hash iptables 2>/dev/null; then
        msg "Using iptables for traffic redirection"
        # Create chains
        iptables -t mangle -N CLASH 2>/dev/null
        iptables -t mangle -N CLASH_LOCAL 2>/dev/null

        # Apply rules in logical order
        apply_iptables_dhcp_rules
        apply_iptables_excluded_interface_rules
        apply_iptables_loop_prevention
        apply_iptables_reserved_networks
        apply_iptables_quic_blocking
        apply_iptables_clash_exclusions
        apply_iptables_server_exclusions "$server_ips"
        apply_iptables_tproxy_rules

        # Hook chains into main tables
        iptables -t mangle -A PREROUTING -j CLASH
        iptables -t mangle -A OUTPUT -j CLASH_LOCAL

        ip route add local default dev lo table 100
        ip rule add fwmark 0x0001 table 100

        msg "iptables rules applied successfully"
    else
        msg "ERROR: Neither nftables nor iptables found"
        return 1
    fi

    msg "Clash rules script started successfully"
}

stop() {
    msg "Stopping Clash rules script"

    if hash nft 2>/dev/null; then
        nft delete table ip clash 2>/dev/null
        ip route del local default dev lo table 100 2>/dev/null
        ip rule del fwmark 0x0001 table 100 2>/dev/null
        msg "nftables rules removed successfully"
    elif hash iptables 2>/dev/null; then
        iptables -t filter -D INPUT -p udp --dport 443 -j REJECT 2>/dev/null
        iptables -t filter -D FORWARD -p udp --dport 443 -j REJECT 2>/dev/null
        iptables -t mangle -D PREROUTING -j CLASH 2>/dev/null
        iptables -t mangle -F CLASH 2>/dev/null
        iptables -t mangle -X CLASH 2>/dev/null
        iptables -t mangle -D OUTPUT -j CLASH_LOCAL 2>/dev/null
        iptables -t mangle -F CLASH_LOCAL 2>/dev/null
        iptables -t mangle -X CLASH_LOCAL 2>/dev/null
        ip route del local default dev lo table 100 2>/dev/null
        ip rule del fwmark 0x0001 table 100 2>/dev/null
        msg "iptables rules removed successfully"
    else
        msg "ERROR: Neither nftables nor iptables found"
        return 1
    fi

    msg "Clash rules script stopped successfully"
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    *)
        echo "Usage: $0 {start|stop}"
        exit 1
        ;;
esac
